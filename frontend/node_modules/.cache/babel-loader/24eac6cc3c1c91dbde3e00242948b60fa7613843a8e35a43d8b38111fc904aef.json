{"ast":null,"code":"var _jsxFileName = \"/Users/shahana-salam/realtime-whiteboard/frontend/src/components/Whiteboard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport socket from \"../../../backend/socket\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Whiteboard = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const ctxRef = useRef(null);\n  const isDrawing = useRef(false); // Ref to track drawing state\n\n  useEffect(() => {\n    console.log(\"Latest\");\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n    ctx.lineCap = \"round\";\n    ctx.lineWidth = 5;\n    ctx.strokeStyle = \"#000000\";\n    ctxRef.current = ctx;\n\n    // Function to draw on the canvas\n    const draw = (x, y, emit = false) => {\n      if (!ctxRef.current) return;\n      ctxRef.current.lineTo(x, y);\n      ctxRef.current.stroke();\n      if (emit) {\n        socket.emit(\"draw\", {\n          x,\n          y\n        });\n      }\n    };\n\n    // Mouse down handler\n    const handleMouseDown = e => {\n      var _ctxRef$current, _ctxRef$current2;\n      isDrawing.current = true;\n      (_ctxRef$current = ctxRef.current) === null || _ctxRef$current === void 0 ? void 0 : _ctxRef$current.beginPath();\n      (_ctxRef$current2 = ctxRef.current) === null || _ctxRef$current2 === void 0 ? void 0 : _ctxRef$current2.moveTo(e.clientX - canvas.getBoundingClientRect().left, e.clientY - canvas.getBoundingClientRect().top);\n    };\n\n    // Mouse up handler\n    const handleMouseUp = () => {\n      if (isDrawing.current) {\n        var _ctxRef$current3;\n        (_ctxRef$current3 = ctxRef.current) === null || _ctxRef$current3 === void 0 ? void 0 : _ctxRef$current3.closePath(); // Close the path\n      }\n      isDrawing.current = false; // Stop drawing\n    };\n\n    // Mouse move handler\n    const handleMouseMove = e => {\n      if (!isDrawing.current) return;\n      const offsetX = e.clientX - canvas.getBoundingClientRect().left;\n      const offsetY = e.clientY - canvas.getBoundingClientRect().top;\n      draw(offsetX, offsetY, true); // Draw locally and emit the coordinates\n    };\n\n    // Draw event from other users\n    const handleDraw = ({\n      x,\n      y\n    }) => {\n      draw(x, y); // Draw from other users\n    };\n\n    // Listen to socket events\n    socket.on(\"draw\", handleDraw);\n\n    // Add event listeners for canvas\n    canvas.addEventListener(\"mousedown\", handleMouseDown);\n    canvas.addEventListener(\"mouseup\", handleMouseUp);\n    canvas.addEventListener(\"mousemove\", handleMouseMove);\n    canvas.addEventListener(\"mouseleave\", handleMouseUp); // Stop drawing if mouse leaves canvas\n\n    // Cleanup function to remove event listeners and socket subscriptions\n    return () => {\n      socket.off(\"draw\", handleDraw);\n      canvas.removeEventListener(\"mousedown\", handleMouseDown);\n      canvas.removeEventListener(\"mouseup\", handleMouseUp);\n      canvas.removeEventListener(\"mousemove\", handleMouseMove);\n      canvas.removeEventListener(\"mouseleave\", handleMouseUp);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: 800,\n    height: 600,\n    style: {\n      border: \"1px solid black\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(Whiteboard, \"CXmTKRsIou+dBsXOsaRQHrl9ys8=\");\n_c = Whiteboard;\nexport default Whiteboard;\nvar _c;\n$RefreshReg$(_c, \"Whiteboard\");","map":{"version":3,"names":["React","useEffect","useRef","socket","jsxDEV","_jsxDEV","Whiteboard","_s","canvasRef","ctxRef","isDrawing","console","log","canvas","current","ctx","getContext","lineCap","lineWidth","strokeStyle","draw","x","y","emit","lineTo","stroke","handleMouseDown","e","_ctxRef$current","_ctxRef$current2","beginPath","moveTo","clientX","getBoundingClientRect","left","clientY","top","handleMouseUp","_ctxRef$current3","closePath","handleMouseMove","offsetX","offsetY","handleDraw","on","addEventListener","off","removeEventListener","ref","width","height","style","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/shahana-salam/realtime-whiteboard/frontend/src/components/Whiteboard.tsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport socket from \"../../../backend/socket\";\n\nconst Whiteboard: React.FC = () => {\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n  const ctxRef = useRef<CanvasRenderingContext2D | null>(null);\n  const isDrawing = useRef(false); // Ref to track drawing state\n\n  useEffect(() => {\n    console.log(\"Latest\");\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    ctx.lineCap = \"round\";\n    ctx.lineWidth = 5;\n    ctx.strokeStyle = \"#000000\";\n    ctxRef.current = ctx;\n\n    // Function to draw on the canvas\n    const draw = (x: number, y: number, emit = false) => {\n      if (!ctxRef.current) return;\n      ctxRef.current.lineTo(x, y);\n      ctxRef.current.stroke();\n      if (emit) {\n        socket.emit(\"draw\", { x, y });\n      }\n    };\n\n    // Mouse down handler\n    const handleMouseDown = (e: MouseEvent) => {\n      isDrawing.current = true;\n      ctxRef.current?.beginPath();\n      ctxRef.current?.moveTo(\n        e.clientX - canvas.getBoundingClientRect().left,\n        e.clientY - canvas.getBoundingClientRect().top\n      );\n    };\n\n    // Mouse up handler\n    const handleMouseUp = () => {\n      if (isDrawing.current) {\n        ctxRef.current?.closePath(); // Close the path\n      }\n      isDrawing.current = false; // Stop drawing\n    };\n\n    // Mouse move handler\n    const handleMouseMove = (e: MouseEvent) => {\n      if (!isDrawing.current) return;\n      const offsetX = e.clientX - canvas.getBoundingClientRect().left;\n      const offsetY = e.clientY - canvas.getBoundingClientRect().top;\n      draw(offsetX, offsetY, true); // Draw locally and emit the coordinates\n    };\n\n    // Draw event from other users\n    const handleDraw = ({ x, y }: { x: number; y: number }) => {\n      draw(x, y); // Draw from other users\n    };\n\n    // Listen to socket events\n    socket.on(\"draw\", handleDraw);\n\n    // Add event listeners for canvas\n    canvas.addEventListener(\"mousedown\", handleMouseDown);\n    canvas.addEventListener(\"mouseup\", handleMouseUp);\n    canvas.addEventListener(\"mousemove\", handleMouseMove);\n    canvas.addEventListener(\"mouseleave\", handleMouseUp); // Stop drawing if mouse leaves canvas\n\n    // Cleanup function to remove event listeners and socket subscriptions\n    return () => {\n      socket.off(\"draw\", handleDraw);\n      canvas.removeEventListener(\"mousedown\", handleMouseDown);\n      canvas.removeEventListener(\"mouseup\", handleMouseUp);\n      canvas.removeEventListener(\"mousemove\", handleMouseMove);\n      canvas.removeEventListener(\"mouseleave\", handleMouseUp);\n    };\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      width={800}\n      height={600}\n      style={{ border: \"1px solid black\" }}\n    />\n  );\n};\n\nexport default Whiteboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}